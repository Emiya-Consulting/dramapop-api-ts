// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Drama {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String   @unique
  year            Int
  averageRating   Float?
  actorIDs        String[] @db.ObjectId
  cast            Actor[]  @relation(fields: [actorIDs], references: [id])
  personIDs       String[] @db.ObjectId
  staff           Person[] @relation(fields: [personIDs], references: [id])
  userIDs         String[] @db.ObjectId
  users           User[]   @relation(fields: [userIDs], references: [id])
  tagIDs          String[] @db.ObjectId
  tags            Tag[]    @relation(fields: [tagIDs], references: [id])
  genres          Genre[]  @relation(fields: [genreIDs], references: [id])
  genreIDs        String[] @db.ObjectId
  thumbnailURL    String?
  description     String?
  countryOfOrigin String?
  seasons         Int?
  episodes        Int?
  createdOn       DateTime @default(now())
  modifiedOn      DateTime @updatedAt
  deleted         Boolean  @default(false)
}

model Actor {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String?
  lastName     String
  dramaIDs     String[] @db.ObjectId
  dramas       Drama[]  @relation(fields: [dramaIDs], references: [id])
  thumbnailURL String?
  createdOn    DateTime @default(now())
  modifiedOn   DateTime @updatedAt
  deleted      Boolean  @default(false)
}

model Person {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String?
  lastName     String
  dramaIDs     String[] @db.ObjectId
  dramas       Drama[]  @relation(fields: [dramaIDs], references: [id])
  thumbnailURL String?
  createdOn    DateTime @default(now())
  modifiedOn   DateTime @updatedAt
  deleted      Boolean  @default(false)
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String?
  lastName     String
  userName     String
  email        String   @unique
  dramaIDs     String[] @db.ObjectId
  dramas       Drama[]  @relation(fields: [dramaIDs], references: [id])
  thumbnailURL String?
  createdOn    DateTime @default(now())
  modifiedOn   DateTime @updatedAt
  deleted      Boolean  @default(false)
}

model UserRating {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  dramaID    String   @db.ObjectId
  userID     String   @db.ObjectId
  rating     Float
  createdOn  DateTime @default(now())
  modifiedOn DateTime @updatedAt
  deleted    Boolean  @default(false)
}

model Tag {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  dramaIDs   String[] @db.ObjectId
  dramas     Drama[]  @relation(fields: [dramaIDs], references: [id])
  createdOn  DateTime @default(now())
  modifiedOn DateTime @updatedAt
  deleted    Boolean  @default(false)
}

model Genre {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  dramaIDs   String[] @db.ObjectId
  dramas     Drama[]  @relation(fields: [dramaIDs], references: [id])
  createdOn  DateTime @default(now())
  modifiedOn DateTime @updatedAt
  deleted    Boolean  @default(false)
}
